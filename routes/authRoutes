const express = require('express');
const router = express.Router();
// Import the controller functions that will handle the logic for these routes
const { register, login, getMe, logout } = require('../controllers/authController');
// Import the 'protect' middleware (defined in middleware/auth.js)
const { protect } = require('../middleware/auth');

// --- Previously, you might have had the User model imported here. It's no longer needed in this file: ---
// const User = require('../models/usersschema');

/**
 * @route   POST /api/auth/register
 * @desc    Register a new user
 * @access  Public
 */
router.post('/register', register); // This points to the 'register' function in authController.js

/*
// --- OLD INLINE LOGIC FOR /register ---
// router.post('/register', async (req, res) => {
//     try {
//         const { name, email, password, phone } = req.body;
//         if (!name || !email || !password || !phone) {
//             return res.status(400).json({ success: false, error: 'All fields are required' });
//         }
//         const userExists = await User.findOne({ email });
//         if (userExists) {
//             return res.status(400).json({ success: false, error: 'User with this email already exists' });
//         }
//         const user = await User.create({ name, email, password, phone });
//         sendTokenResponse(user, 201, res); // sendTokenResponse was also undefined here
//     } catch (err) {
//         console.error('Registration error:', err);
//         res.status(400).json({ success: false, error: err.message || 'Registration failed' });
//     }
// });
// --- END OLD INLINE LOGIC FOR /register ---
*/

/**
 * @route   POST /api/auth/login
 * @desc    Login user & get token (and handle redirect logic)
 * @access  Public
 */
router.post('/login', login); // This points to the 'login' function in authController.js

/*
// --- OLD INLINE LOGIC FOR /login ---
// router.post('/login', async (req, res) => {
//     try {
//         const { email, password } = req.body;
//         if (!email || !password) {
//             return res.status(400).json({ success: false, error: 'Please provide an email and password' });
//         }
//         const user = await User.findOne({ email }).select('+password');
//         if (!user) {
//             return res.status(401).json({ success: false, error: 'Invalid credentials' });
//         }
//         const isMatch = await user.matchPassword(password);
//         if (!isMatch) {
//             return res.status(401).json({ success: false, error: 'Invalid credentials' });
//         }
//         sendTokenResponse(user, 200, res); // sendTokenResponse was also undefined here
//     } catch (err) {
//         console.error('Login error:', err);
//         res.status(500).json({ success: false, error: 'Server error during login' });
//     }
// });
// --- END OLD INLINE LOGIC FOR /login ---
*/

/**
 * @route   GET /api/auth/me
 * @desc    Get current logged in user's details
 * @access  Private (requires authentication via 'protect' middleware)
 */
router.get('/me', protect, getMe); // This points to the 'getMe' function in authController.js

/*
// --- OLD INLINE LOGIC FOR /me ---
// router.get('/me', protect, async (req, res) => {
//     res.status(200).json({ success: true, data: req.user });
// });
// --- END OLD INLINE LOGIC FOR /me ---
*/

/**
 * @route   GET /api/auth/logout
 * @desc    Log user out / clear JWT cookie
 * @access  Private (best practice to be protected)
 */
router.get('/logout', logout); // This points to the 'logout' function in authController.js

/*
// --- OLD INLINE LOGIC FOR /logout ---
// router.get('/logout', protect, (req, res) => {
//     res.cookie('token', 'none', {
//         expires: new Date(Date.now() + 10 * 1000),
//         httpOnly: true
//     });
//     res.status(200).json({ success: true, data: {} });
// });
// --- END OLD INLINE LOGIC FOR /logout ---
*/

module.exports = router;